Metadata-Version: 2.1
Name: dgt-rpc
Version: 0.1.0
Summary: A simple client for interacting with Odoo via XML-RPC
Home-page: https://github.com/ay131/dgt_rpc
Author: Ahmed Youssef
Author-email: ahmed.youssef@compit.aun.edu.eg
License: MIT
Description: # DGT RPC Client Documentation
        
        Welcome to the documentation for the DGT RPC Client, a powerful Python library for interacting with DgteraERP systems via XML-RPC.
        
        ## Contents
        - [Installation](./docs/installation.md)
        - [Getting Started](./docs/getting_started.md)
        - [Usage Examples](./docs/usage_examples.md)
        - [API Reference](./docs/api_reference.md)
        - [Configuration](./docs/configuration.md)
        - [Advanced Usage](./docs/advanced_usage.md)
        - [Troubleshooting](./docs/troubleshooting.md)
        - [Contributing](./docs/contributing.md)
        - [License](./LICENSE)
        - [Support](./docs/support.md)
        - [FAQ](./docs/faq.md)
        - [Changelog](./docs/changelog.md)
        - [Security](./docs/security.md)
            
        # DGT RPC Client
        
        A powerful and flexible Python client for interacting with DgteraERP systems via XML-RPC protocol, specifically designed for DGTera environments.
        
        ## Overview
        
        This package provides a robust interface to connect to Dgterainstances, authenticate, and perform operations on Dgteramodels. It's particularly optimized for working with Point of Sale (POS) systems in DGTera environments, allowing administrators to efficiently monitor and manage multiple POS configurations across different databases.
        
        ## Features
        
        - **Simple Authentication**: Support for both API key and username/password authentication
        - **Flexible Configuration**: Connect to multiple Dgterainstances with different credentials
        - **POS Management**: Specialized methods for working with POS configurations
        - **Order Tracking**: Easily retrieve and analyze POS order data
        - **Performance Optimized**: Implements connection pooling and authentication caching
        - **Comprehensive Error Handling**: Detailed error reporting and logging
        - **Well Documented**: Complete docstrings and usage examples
        
        ## Installation
        
        ## Prerequisites
        - Python 3.6 or later
        
        ## Install with pip
        
        Before installing, ensure that you have Python 3.6 or later. You can install the DGT RPC Client directly from PyPI:
        
        ```bash
        pip install dgt-rpc
        ```
        
        ## Quick Start
        
        ```python
        from dgt_rpc import DgtClient, DgtPOSClient
        
        # Create a client
        client = DgtClient(
            url="https://your-Dgtera-instance.com",
            db="your_database",
            api_key="your_api_key"
        )
        
        # Authenticate
        uid = client.authenticate()
        if uid:
            print(f"Successfully authenticated with UID: {uid}")
            
            # Search for partners
            partners = client.search_read(
                model='res.partner',
                domain=[('customer_rank', '>', 0)],
                fields=['name', 'email', 'phone'],
                limit=5
            )
            
            # Display results
            for partner in partners:
                print(f"Partner: {partner['name']}, Email: {partner.get('email', 'N/A')}")
        ```
        
        ## POS Client Example
        
        ```python
        from dgt_rpc import DgtPOSClient
        
        # Create a POS client
        pos_client = DgtPOSClient(
            url="https://admin-instance.Dgtera.com",
            db="admin_db",
            api_key="admin_api_key"
        )
        
        # Get POS configurations for a specific database
        pos_configs = pos_client.get_pos_data("retail_db")
        
        # Get orders for each POS
        for pos_config in pos_configs:
            orders = pos_client.get_pos_orders(pos_config, "retail_db")
            
            print(f"\nOrders for POS: {pos_config.get('pos_name')}")
            
            if 'newest' in orders and orders['newest']:
                newest = orders['newest'][0]
                print(f"Latest order: {newest['name']} on {newest['date_order']}")
                
            if 'oldest' in orders and orders['oldest']:
                oldest = orders['oldest'][0]
                print(f"First order: {oldest['name']} on {oldest['date_order']}")
        ```
        
        ## Configuration
        
        The client can be configured in several ways:
        
        ### 1. During Initialization
        
        ```python
        client = DgtClient(
            url="https://your-Dgtera-instance.com",
            db="your_database",
            username="your_username",
            password="your_password"
            # OR
            # api_key="your_api_key"
        )
        ```
        
        ### 2. Environment Variables
        
        ```python
        import os
        from dgt_rpc import DgtClient
        
        os.environ['Dgtera_URL'] = "https://your-Dgtera-instance.com"
        os.environ['Dgtera_DB'] = "your_database"
        os.environ['Dgtera_API_KEY'] = "your_api_key"
        
        # Client will use environment variables if no parameters are provided
        client = DgtClient.from_environment()
        ```
        
        ### 3. Configuration File
        
        Create a configuration file at `~/.dgt_rpc.conf` or specify a path:
        
        ```ini
        [default]
        url = https://your-Dgtera-instance.com
        db = your_database
        api_key = your_api_key
        
        [production]
        url = https://production.Dgtera.com
        db = prod_db
        username = admin
        password = secure_password
        ```
        
        Then load the configuration:
        
        ```python
        from dgt_rpc import DgtClient
        
        # Load the default profile
        client = DgtClient.from_config()
        
        # Or specify a profile
        prod_client = DgtClient.from_config(profile="production")
        ```
        
        ## Advanced Usage
        
        ### Custom Model Methods
        
        ```python
        # Call any method on any model
        result = client.execute(
            model='product.product',
            method='get_product_multiline_description_sale',
            [product_id]
        )
        ```
        
        ### Batch Operations
        
        ```python
        # Create multiple records efficiently
        product_ids = client.create_batch(
            model='product.product',
            values_list=[
                {'name': 'Product 1', 'list_price': 100},
                {'name': 'Product 2', 'list_price': 200},
                {'name': 'Product 3', 'list_price': 300},
            ]
        )
        ```
        
        ### Error Handling
        
        ```python
        from dgt_rpc import DgtClient, DgtException
        
        client = DgtClient(url="https://your-Dgtera-instance.com")
        
        try:
            client.authenticate(db="db", api_key="invalid_key")
        except DgtException as e:
            print(f"Authentication failed: {e}")
        ```
        
        ## Contributing
        
        Contributions are welcome! Please feel free to submit a Pull Request.
        
        ## License
        
        MIT License
        
        Copyright (c) 2023 DGTera
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
